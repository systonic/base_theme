<?php

/**
 * @file
 * Contains theme override and preprocess functions.
 */

use Drupal\Views\ViewExecutable;
use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_views_pre_render().
 */
function base_theme_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'frontpage' && $view->current_display == 'page_1') {
    // Use some or all of the following 3 lines to remove specific 'no results' behaviors
    unset($view->empty['area_text_custom']);
    unset($view->empty['node_listing_empty']);
    unset($view->empty['title']);
    unset($view->pager);
    $view->result = [];
    $view->feedIcons = [];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = \Drupal\Component\Utility\Html::cleanCssIdentifier($path_alias);

  $variables['attributes']['class'][] = !$variables['root_path'] ? 'front' : 'not-front';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_page(&$variables) {
  $variables['attributes']['class'][] = 'page-content';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_menu(&$variables) {
  $current_path = \Drupal::request()->getRequestUri();
  _base_theme_menu_active_item($variables['items'], $current_path);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'hero') {
    if (!is_null($variables['node']->field_visuel->entity) && $uri = $variables['node']->field_visuel->entity->field_media_image->entity->uri->value) {
      $settings = \Drupal::service('entity_type.manager')->getStorage('entity_view_display')->load('media.image.hero_inside')->getRenderer('field_media_image')->getSettings();
      if ($style = \Drupal::service('entity_type.manager')->getStorage('image_style')->load($settings['image_style'])) {
        $variables['bg'] = $style->buildUrl($uri);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_block(&$variables) {
  //$elements = $variables['elements'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_views_view(&$variables) {
  //if ($variables['view']->id() == '') {}
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_theme_preprocess_field(&$variables) {
/*
  $element = $variables['element'];
  $classes = [];

  if (isset($element['#entity_type']) && $element['#entity_type'] == 'media') {
    switch ($element['#view_mode']) {
      case '':
        $classes = [''];
        break;
    }

    if (!empty($classes)) {
      foreach ($variables['items'] as $key => $value) {
        $variables['items'][$key]['content']['#item_attributes']['class'] = $classes;
      }
    }
  }
*/
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#name'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['children']['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'more_link') {
    $suggestions = array_reverse($suggestions);
  }

  if (isset($element['#type']) && $element['#type'] == 'actions') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $element['submit']['#id']);
  }

  if (isset($element['#type']) && $element['#type'] == 'webform_actions') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $element['#webform_id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (stripos($element['#id'], 'views-exposed-form-') === 0) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#view_id'];
  }

  if (stripos($element['#id'], 'user-') === 0) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'user';
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_theme_suggestions_form_element_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#name'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#name'];
  }

  if (isset($element['#webform'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $element['#webform_id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function base_theme_theme_suggestions_field_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#entity_type']) && $element['#entity_type'] == 'media') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $element['#entity_type'] . '__' . $element['#view_mode'];
  }
}

/**
 * .
 */
function _base_theme_menu_active_item(&$items, $current_path) {
  foreach ($items as &$item) {
    if ($item['url']->toString() == $current_path) {
			$item['is_active'] = TRUE;
		}
		elseif (count($item['below'])) {
			_base_theme_menu_active_item($item['below'], $current_path);
		}
  }
}
